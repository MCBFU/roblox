<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>聊天系统</title>
  <!-- 引入Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- 引入Font Awesome -->
  <link href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css" rel="stylesheet">
  
  <!-- 配置Tailwind自定义颜色和字体 -->
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: '#3B82F6',
            secondary: '#60A5FA',
            dark: '#1E40AF',
            light: '#DBEAFE',
            neutral: '#F3F4F6'
          },
          fontFamily: {
            sans: ['Inter', 'system-ui', 'sans-serif'],
          },
        },
      }
    }
  </script>
  
  <style type="text/tailwindcss">
    @layer utilities {
      .content-auto {
        content-visibility: auto;
      }
      .scrollbar-hide {
        -ms-overflow-style: none;
        scrollbar-width: none;
      }
      .scrollbar-hide::-webkit-scrollbar {
        display: none;
      }
      .message-appear {
        animation: messageAppear 0.3s ease-out forwards;
      }
      .form-float {
        animation: formFloat 6s ease-in-out infinite;
      }
      @keyframes messageAppear {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
      }
      @keyframes formFloat {
        0% { transform: translateY(0px); }
        50% { transform: translateY(-10px); }
        100% { transform: translateY(0px); }
      }
    }
  </style>
</head>
<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen font-sans">
  <!-- 登录界面 -->
  <div id="loginSection" class="min-h-screen flex items-center justify-center p-4">
    <div class="w-full max-w-md">
      <div class="bg-white rounded-2xl shadow-xl overflow-hidden form-float">
        <div class="p-6 md:p-8">
          <div class="text-center mb-6">
            <div class="w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4">
              <i class="fa fa-comments text-2xl text-primary"></i>
            </div>
            <h2 class="text-2xl font-bold text-gray-800">欢迎回来</h2>
            <p class="text-gray-500 mt-1">请登录以继续聊天</p>
          </div>
          
          <form id="loginForm" class="space-y-4">
            <div>
              <label for="loginUsername" class="block text-sm font-medium text-gray-700 mb-1">用户名</label>
              <div class="relative">
                <span class="absolute inset-y-0 left-0 flex items-center pl-3 text-gray-500">
                  <i class="fa fa-user"></i>
                </span>
                <input type="text" id="loginUsername" name="loginUsername" required
                  class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:border-primary transition-all"
                  placeholder="请输入用户名">
              </div>
            </div>
            
            <div>
              <label for="loginPassword" class="block text-sm font-medium text-gray-700 mb-1">密码</label>
              <div class="relative">
                <span class="absolute inset-y-0 left-0 flex items-center pl-3 text-gray-500">
                  <i class="fa fa-lock"></i>
                </span>
                <input type="password" id="loginPassword" name="loginPassword" required
                  class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:border-primary transition-all"
                  placeholder="请输入密码">
              </div>
            </div>
            
            <button type="submit" 
              class="w-full bg-primary hover:bg-dark text-white font-medium py-3 px-4 rounded-lg transition-all duration-300 transform hover:scale-[1.02] active:scale-[0.98] focus:outline-none focus:ring-2 focus:ring-primary/50">
              登录
            </button>
            
            <div class="text-center text-gray-600 text-sm">
              还没有账号？ <button type="button" id="showRegister" class="text-primary hover:text-dark font-medium">立即注册</button>
            </div>
          </form>
        </div>
      </div>
      
      <div class="mt-6 text-center text-gray-500 text-sm">
        &copy; 2023 聊天系统 - 安全沟通
      </div>
    </div>
  </div>
  
  <!-- 注册界面 -->
  <div id="registerSection" class="min-h-screen flex items-center justify-center p-4 hidden">
    <div class="w-full max-w-md">
      <div class="bg-white rounded-2xl shadow-xl overflow-hidden form-float">
        <div class="p-6 md:p-8">
          <div class="text-center mb-6">
            <div class="w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4">
              <i class="fa fa-user-plus text-2xl text-primary"></i>
            </div>
            <h2 class="text-2xl font-bold text-gray-800">创建账号</h2>
            <p class="text-gray-500 mt-1">注册后即可开始聊天</p>
          </div>
          
          <form id="registerForm" class="space-y-4">
            <div>
              <label for="regUsername" class="block text-sm font-medium text-gray-700 mb-1">用户名</label>
              <div class="relative">
                <span class="absolute inset-y-0 left-0 flex items-center pl-3 text-gray-500">
                  <i class="fa fa-user"></i>
                </span>
                <input type="text" id="regUsername" name="regUsername" required
                  class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:border-primary transition-all"
                  placeholder="请设置用户名">
              </div>
            </div>
            
            <div>
              <label for="regPassword" class="block text-sm font-medium text-gray-700 mb-1">密码</label>
              <div class="relative">
                <span class="absolute inset-y-0 left-0 flex items-center pl-3 text-gray-500">
                  <i class="fa fa-lock"></i>
                </span>
                <input type="password" id="regPassword" name="regPassword" required
                  class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:border-primary transition-all"
                  placeholder="请设置密码">
              </div>
            </div>
            
            <div>
              <label for="regConfirmPassword" class="block text-sm font-medium text-gray-700 mb-1">确认密码</label>
              <div class="relative">
                <span class="absolute inset-y-0 left-0 flex items-center pl-3 text-gray-500">
                  <i class="fa fa-lock"></i>
                </span>
                <input type="password" id="regConfirmPassword" name="regConfirmPassword" required
                  class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/50 focus:border-primary transition-all"
                  placeholder="请再次输入密码">
              </div>
            </div>
            
            <button type="submit" 
              class="w-full bg-primary hover:bg-dark text-white font-medium py-3 px-4 rounded-lg transition-all duration-300 transform hover:scale-[1.02] active:scale-[0.98] focus:outline-none focus:ring-2 focus:ring-primary/50">
              注册
            </button>
            
            <div class="text-center text-gray-600 text-sm">
              已有账号？ <button type="button" id="showLogin" class="text-primary hover:text-dark font-medium">立即登录</button>
            </div>
          </form>
        </div>
      </div>
      
      <div class="mt-6 text-center text-gray-500 text-sm">
        &copy; 2023 聊天系统 - 安全沟通
      </div>
    </div>
  </div>

  <!-- 聊天界面 -->
  <div id="chatSection" class="hidden flex flex-col min-h-screen">
    <!-- 欢迎弹窗 -->
    <div id="welcomeModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black/50 transition-opacity duration-300">
      <div class="bg-white rounded-2xl shadow-2xl p-8 max-w-md w-full mx-4 transform transition-all duration-300">
        <div class="text-center mb-6">
          <div class="w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4">
            <i class="fa fa-comments text-2xl text-primary"></i>
          </div>
          <h2 class="text-[clamp(1.5rem,3vw,2rem)] font-bold text-gray-800">欢迎来到聊天界面！</h2>
          <p class="text-gray-600 mt-2">你好，<span id="welcomeUsername"></span>，开始你的对话吧</p>
        </div>
        <button id="confirmWelcome" class="w-full bg-primary hover:bg-dark text-white font-medium py-3 px-4 rounded-lg transition-all duration-300 transform hover:scale-[1.02] active:scale-[0.98] focus:outline-none focus:ring-2 focus:ring-primary/50">
          开始聊天
        </button>
      </div>
    </div>

    <!-- 聊天容器 -->
    <div class="flex-1 flex flex-col max-w-5xl w-full mx-auto w-full p-4 md:p-6 lg:p-8">
      <!-- 聊天头部 -->
      <header class="bg-white rounded-t-xl shadow-md p-4 flex items-center justify-between">
        <div class="flex items-center space-x-3">
          <div class="w-10 h-10 bg-primary rounded-full flex items-center justify-center">
            <i class="fa fa-comments text-white"></i>
          </div>
          <h1 class="text-xl font-bold text-gray-800">友好聊天室</h1>
        </div>
        <div class="flex items-center space-x-4">
          <span class="hidden md:inline-block text-sm text-gray-600">
            <i class="fa fa-user-circle mr-1"></i><span id="currentUser"></span>
          </span>
          <button id="logoutBtn" class="p-2 rounded-full hover:bg-gray-100 transition-colors text-gray-600 hover:text-red-500">
            <i class="fa fa-sign-out"></i>
          </button>
        </div>
      </header>

      <!-- 聊天消息区域 -->
      <main id="chatMessages" class="flex-1 bg-white p-4 overflow-y-auto scrollbar-hide shadow-inner">
        <!-- 初始提示消息 -->
        <div class="flex justify-center my-4">
          <span class="text-xs text-gray-500 bg-gray-100 px-3 py-1 rounded-full" id="currentDate"></span>
        </div>
        <div class="flex justify-center mb-4">
          <div class="bg-gray-100 text-gray-700 p-3 rounded-lg max-w-[80%] text-center text-sm">
            欢迎使用聊天功能！请输入消息开始对话
          </div>
        </div>
      </main>

      <!-- 输入区域 -->
      <footer class="bg-white rounded-b-xl shadow-md p-4">
        <form id="chatForm" class="flex items-center space-x-2">
          <textarea 
            id="messageInput" 
            placeholder="输入消息..." 
            class="flex-1 border border-gray-300 rounded-full px-4 py-3 focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary resize-none transition-all"
            rows="1"
          ></textarea>
          <button 
            type="submit" 
            class="bg-primary hover:bg-dark text-white rounded-full w-10 h-10 flex items-center justify-center transition-all duration-300 transform hover:scale-110 active:scale-95"
          >
            <i class="fa fa-paper-plane"></i>
          </button>
        </form>
      </footer>
    </div>
  </div>

  <script>
    // DOM元素
    const loginSection = document.getElementById('loginSection');
    const registerSection = document.getElementById('registerSection');
    const chatSection = document.getElementById('chatSection');
    const showRegisterBtn = document.getElementById('showRegister');
    const showLoginBtn = document.getElementById('showLogin');
    const loginForm = document.getElementById('loginForm');
    const registerForm = document.getElementById('registerForm');
    const chatForm = document.getElementById('chatForm');
    const welcomeModal = document.getElementById('welcomeModal');
    const confirmWelcomeBtn = document.getElementById('confirmWelcome');
    const welcomeUsername = document.getElementById('welcomeUsername');
    const currentUserEl = document.getElementById('currentUser');
    const logoutBtn = document.getElementById('logoutBtn');
    const chatMessages = document.getElementById('chatMessages');
    const messageInput = document.getElementById('messageInput');
    const currentDateEl = document.getElementById('currentDate');
    
    // 存储用户数据 (实际应用中会使用后端数据库)
    let users = JSON.parse(localStorage.getItem('chatUsers')) || [];
    let currentUser = localStorage.getItem('currentChatUser') || null;
    
    // 页面加载时检查用户是否已登录
    document.addEventListener('DOMContentLoaded', () => {
      setCurrentDate();
      
      if (currentUser) {
        // 如果用户已登录，直接进入聊天界面
        showChatSection();
      }
    });
    
    // 切换到注册界面
    showRegisterBtn.addEventListener('click', () => {
      loginSection.classList.add('hidden');
      registerSection.classList.remove('hidden');
    });
    
    // 切换到登录界面
    showLoginBtn.addEventListener('click', () => {
      registerSection.classList.add('hidden');
      loginSection.classList.remove('hidden');
    });
    
    // 注册表单提交
    registerForm.addEventListener('submit', (e) => {
      e.preventDefault();
      
      const username = document.getElementById('regUsername').value.trim();
      const password = document.getElementById('regPassword').value;
      const confirmPassword = document.getElementById('regConfirmPassword').value;
      
      // 验证
      if (username === '') {
        alert('请输入用户名');
        return;
      }
      
      if (password === '') {
        alert('请输入密码');
        return;
      }
      
      if (password !== confirmPassword) {
        alert('两次输入的密码不一致');
        return;
      }
      
      // 检查用户名是否已存在
      const userExists = users.some(user => user.username === username);
      if (userExists) {
        alert('用户名已存在，请选择其他用户名');
        return;
      }
      
      // 注册新用户
      users.push({ username, password });
      localStorage.setItem('chatUsers', JSON.stringify(users));
      
      alert('注册成功，请登录');
      registerForm.reset();
      showLoginBtn.click();
    });
    
    // 登录表单提交
    loginForm.addEventListener('submit', (e) => {
      e.preventDefault();
      
      const username = document.getElementById('loginUsername').value.trim();
      const password = document.getElementById('loginPassword').value;
      
      // 查找用户
      const user = users.find(u => u.username === username && u.password === password);
      
      if (user) {
        // 登录成功
        currentUser = username;
        localStorage.setItem('currentChatUser', currentUser);
        showChatSection();
        loginForm.reset();
      } else {
        alert('用户名或密码不正确');
      }
    });
    
    // 显示聊天界面
    function showChatSection() {
      loginSection.classList.add('hidden');
      registerSection.classList.add('hidden');
      chatSection.classList.remove('hidden');
      
      // 设置欢迎信息
      welcomeUsername.textContent = currentUser;
      currentUserEl.textContent = currentUser;
      
      // 加载历史消息
      loadChatHistory();
    }
    
    // 关闭欢迎弹窗
    confirmWelcomeBtn.addEventListener('click', () => {
      welcomeModal.classList.add('opacity-0', 'pointer-events-none');
      setTimeout(() => {
        welcomeModal.style.display = 'none';
      }, 300);
    });
    
    // 登出功能
    logoutBtn.addEventListener('click', () => {
      if (confirm('确定要退出登录吗？')) {
        currentUser = null;
        localStorage.removeItem('currentChatUser');
        chatSection.classList.add('hidden');
        loginSection.classList.remove('hidden');
        welcomeModal.style.display = 'flex';
        welcomeModal.classList.remove('opacity-0', 'pointer-events-none');
      }
    });
    
    // 发送消息
    chatForm.addEventListener('submit', (e) => {
      e.preventDefault();
      
      const message = messageInput.value.trim();
      if (message === '') return;
      
      // 添加消息到聊天记录
      addMessage(currentUser, message, new Date());
      
      // 清空输入框
      messageInput.value = '';
      adjustTextareaHeight();
      
      // 保存聊天历史
      saveChatHistory();
      
      // 自动滚动到底部
      scrollToBottom();
    });
    
    // 调整文本框高度
    messageInput.addEventListener('input', adjustTextareaHeight);
    
    function adjustTextareaHeight() {
      messageInput.style.height = 'auto';
      messageInput.style.height = (Math.min(messageInput.scrollHeight, 120)) + 'px';
    }
    
    // 添加消息到界面
    function addMessage(user, text, timestamp) {
      const isCurrentUser = user === currentUser;
      
      const messageDiv = document.createElement('div');
      messageDiv.className = `flex ${isCurrentUser ? 'justify-end' : 'justify-start'} mb-4 message-appear`;
      
      const messageBubble = document.createElement('div');
      messageBubble.className = `max-w-[80%] ${isCurrentUser ? 'mr-2' : 'ml-2'}`;
      
      const userInfo = document.createElement('div');
      userInfo.className = `text-xs ${isCurrentUser ? 'text-right' : 'text-left'} mb-1`;
      userInfo.innerHTML = `<span class="font-medium ${isCurrentUser ? 'text-primary' : 'text-gray-600'}">${user}</span> 
                            <span class="text-gray-400 ml-1">${formatTime(timestamp)}</span>`;
      
      const messageContent = document.createElement('div');
      messageContent.className = `${isCurrentUser ? 'bg-primary text-white' : 'bg-gray-200 text-gray-800'} 
                                  p-3 rounded-2xl ${isCurrentUser ? 'rounded-tr-none' : 'rounded-tl-none'}`;
      messageContent.textContent = text;
      
      messageBubble.appendChild(userInfo);
      messageBubble.appendChild(messageContent);
      messageDiv.appendChild(messageBubble);
      
      // 移除初始提示
      if (chatMessages.children.length <= 2) {
        chatMessages.innerHTML = '';
        chatMessages.appendChild(createDateDiv());
      }
      
      chatMessages.appendChild(messageDiv);
    }
    
    // 设置当前日期
    function setCurrentDate() {
      const now = new Date();
      currentDateEl.textContent = formatDate(now);
    }
    
    // 创建日期分隔符
    function createDateDiv() {
      const dateDiv = document.createElement('div');
      dateDiv.className = 'flex justify-center my-4';
      dateDiv.innerHTML = `<span class="text-xs text-gray-500 bg-gray-100 px-3 py-1 rounded-full">${formatDate(new Date())}</span>`;
      return dateDiv;
    }
    
    // 格式化日期
    function formatDate(date) {
      return date.toLocaleDateString('zh-CN', { year: 'numeric', month: 'long', day: 'numeric', weekday: 'long' });
    }
    
    // 格式化时间
    function formatTime(date) {
      return date.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' });
    }
    
    // 滚动到最底部
    function scrollToBottom() {
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    // 保存聊天历史
    function saveChatHistory() {
      const messages = [];
      document.querySelectorAll('#chatMessages > div:not(:first-child)').forEach(el => {
        if (el.classList.contains('message-appear')) {
          const user = el.querySelector('.font-medium').textContent;
          const text = el.querySelector('div:nth-child(2)').textContent;
          const timeText = el.querySelector('.text-gray-400').textContent;
          
          // 简单时间解析，实际应用中可能需要更复杂的处理
          const now = new Date();
          const [hours, minutes] = timeText.split(':').map(Number);
          now.setHours(hours);
          now.setMinutes(minutes);
          
          messages.push({ user, text, timestamp: now.getTime() });
        }
      });
      
      localStorage.setItem('chatHistory', JSON.stringify(messages));
    }
    
    // 加载聊天历史
    function loadChatHistory() {
      const history = JSON.parse(localStorage.getItem('chatHistory')) || [];
      
      if (history.length > 0) {
        chatMessages.innerHTML = '';
        chatMessages.appendChild(createDateDiv());
        
        history.forEach(msg => {
          addMessage(msg.user, msg.text, new Date(msg.timestamp));
        });
        
        scrollToBottom();
      }
    }
    
    // 初始化文本框高度
    adjustTextareaHeight();
  </script>
</body>
</html>
